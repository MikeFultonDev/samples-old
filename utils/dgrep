#
# Search all datasets matching the pattern for a string, e.g. dgrep IEFPROC sys1.* would search for IEFPROC in all datasets matching SYS1.*
# Datasets may be sequential datasets or partitioned datasets. If the dataset is partitioned, the search will go across all members of the dataset.
#
verbose() {
	if [[ ${verbose} -eq 1 ]]; then
		echo $*
	fi
}

set -o noglob
#set -x
ignorecase=0
debug=0
verbose=0
numbers=0
while getopts ":invd" opt; do
  case ${opt} in
    d )
      debug=1
      ;;
    n )
      numbers=1
      ;;
    i )
      ignorecase=1
      ;;
    v )
      verbose=1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      syntax
      exit 4
      ;;
  esac
done
shift $(expr $OPTIND - 1 )
if [ $# -ne 2 ]; then
	echo 'dgrep [<options>] <str> <dataset-pattern>'
	echo '  where <options> is one or more of:'
	echo '  -i: ignore case'
	echo '  -i: display line numbers'
	echo '  -v: verbose'
	echo '  -d: debug'
        echo '  Example: dgrep rexx IBMUSER.MVSCMD.TSO.* (search for rexx (case sensitive) in all datasets of the pattern IBMUSER.MVSCMD.TSO.*)'
        echo '  Example: dgrep -i Hello IBMUSER.MVSCMD.*.COB* (search for Hello (case insensitive) in all datasets of the pattern IBMUSER.MVSCMD.*.COB*)'
	exit 16
fi

str=$1;
datasetpattern=$2;
datasetpattern=$(echo ${datasetpattern} | tr '[:lower:]' '[:upper:]')

args="SRCHCMP,IDPRFX,NOSUMS,LONGLN,NOPRTCC"
if [[ ${ignorecase} -eq 1 ]]; then
	args=${args}",ANYC"
fi
datasets=`dlsraw ${datasetpattern} | awk '/NONVSAM/ { print $2 }' `
for dataset in ${datasets}; do
	verbose "Searching dataset: " ${dataset}
	echo "SRCHFOR '"${str}"'" | 
        	mvscmd --pgm=isrsupc --args=${args} --newdd=${dataset} --outdd=* --sysin=stdin | 
         		awk '!/  ISRSUPC/' | 
	 		awk -vnumbers="${numbers}" '
				BEGIN {mem=""; dsn="";}
              			/LINE-#  SOURCE SECTION                    SRCH DSN:/ { 
					dsn=$6; next; 
				} 
	      			/ --------- STRING\(S\) FOUND -------------------/ { 
					mem=$1; next; 
				}
				// { 
					if ($1 != "") { 
						line=substr($0,1,7); 
						text=substr($0,8); 
						if (numbers) {
							out = line":"text;
						} else {
							out = text;
						}
						if (mem != "") { 
							printf "%-44s %-8s %s\n", dsn, mem, out; 
						} else { 
							printf "%-53s %s\n", dsn, out; 
						} 
					}
				}
			'
done
